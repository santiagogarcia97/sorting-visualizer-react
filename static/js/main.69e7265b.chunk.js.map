{"version":3,"sources":["MainPage/Topbar.js","MainPage/sortingAlgorithms/bubbleSort.js","MainPage/sortingAlgorithms/mergeSort.js","MainPage/sortingAlgorithms/quickSort.js","MainPage/Menu.js","MainPage/ArrayElement.js","MainPage/MainPage.js","App.js","index.js"],"names":["Topbar","className","href","src","alt","bubleSort","array","newArrayState","count","newState","arrayState","sorted","auxArr","n","length","i","j","color","cloneDeep","value","aux","mergeSort","auxArray","sort","unsortedArray","globalIndex","midpoint","Math","floor","leftArray","slice","rightArray","sortedArray","finalMerge","init","end","addState","concat","push","shift","merge","quickSort","forEach","e","low","high","pivotIndex","pivot","temp","partition","Menu","setArray","generateArray","setRenderType","useState","menuDisabled","setMenuDisabled","arrayLength","setArrayLength","delay","setDelay","algorithm","setAlgorithm","setTimeout","htmlFor","id","type","onChange","event","target","min","max","step","name","defaultValue","onClick","console","log","ArrayElement","element","render","height","backgroundColor","style","MainPage","renderType","newArray","parseInt","random","map","key","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"iNAeeA,G,MAbA,WACb,OACE,6BACE,yBAAKC,UAAU,aACb,+DACA,uBAAGC,KAAK,gEACN,yBAAKC,IAAI,aAAaC,IAAI,gB,uBC8BrBC,EApCG,SAACC,EAAOC,GAUxB,IATA,IAAIC,EAAQ,EACNC,EAAW,SAACC,EAAYC,GAC5BJ,EAAcG,EAAYF,EAAOG,GACjCH,GAAS,GAGLI,EAASN,EACTO,EAAID,EAAOE,OAERC,EAAI,EAAGA,EAAIF,EAAGE,GAAK,EAAG,CAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAIE,EAAI,EAAGC,GAAK,EAAG,CAKrC,GAJAJ,EAAOI,GAAGC,MAAQ,WAClBL,EAAOI,EAAI,GAAGC,MAAQ,WACtBR,EAASS,IAAUN,IAEfA,EAAOI,GAAGG,MAAQP,EAAOI,EAAI,GAAGG,MAAO,CACzC,IAAMC,EAAMR,EAAOI,GAAGG,MACtBP,EAAOI,GAAGG,MAAQP,EAAOI,EAAI,GAAGG,MAChCP,EAAOI,EAAI,GAAGG,MAAQC,EAEtBR,EAAOI,GAAGC,MAAQ,WAClBL,EAAOI,EAAI,GAAGC,MAAQ,WACtBR,EAASS,IAAUN,IAGrBA,EAAOI,GAAGC,MAAQ,UAClBL,EAAOI,EAAI,GAAGC,MAAQ,UACtBR,EAASS,IAAUN,IAErBA,EAAOC,EAAIE,EAAI,GAAGE,MAAQ,YAC1BR,EAASS,IAAUN,IAErBH,EAASG,GAAQ,I,OC2DJS,EA5FG,SAACf,EAAOC,GACxB,IAAIC,EAAQ,EACNC,EAAW,SAACC,EAAYC,GAC5BJ,EAAcG,EAAYF,EAAOG,GACjCH,GAAS,GAEPc,EAAQ,YAAOhB,IAoEN,SAAPiB,EAAQC,EAAeC,GAC3B,GAAID,EAAcV,OAAS,EACzB,OAAOU,EAGT,IAAME,EAAWC,KAAKC,MAAMJ,EAAcV,OAAS,GAC7Ce,EAAYL,EAAcM,MAAM,EAAGJ,GACnCK,EAAaP,EAAcM,MAAMJ,EAAUF,EAAcV,QAC/D,OA1EY,SAACe,EAAWE,EAAYN,GAiBpC,IAhBA,IAAMO,EAAc,GACdC,EAAaX,EAASR,SAAWe,EAAUf,OAASiB,EAAWjB,OAC/DoB,EAAOZ,EAASQ,MAAM,EAAGL,GACzBU,EAAMb,EAASQ,MACnBL,EAAcM,EAAWjB,OAASe,EAAUf,QAGxCsB,EAAW,WAAqB,IAApBzB,EAAmB,wDACnCW,EAAWY,EACRG,OAAOL,GACPK,OAAOR,GACPQ,OAAON,GACPM,OAAOF,GACV1B,EAASS,IAAUI,GAAWX,IAGzBkB,EAAUf,QAAUiB,EAAWjB,QACpCe,EAAU,GAAGZ,MAAQ,WACrBc,EAAW,GAAGd,MAAQ,WACtBmB,IAEIP,EAAU,GAAGV,OAASY,EAAW,GAAGZ,OACtCa,EAAYM,KAAKT,EAAU,IAC3BA,EAAUU,QACVH,IAEAJ,EAAYA,EAAYlB,OAAS,GAAGG,MAAQgB,EACxC,YACA,UACJF,EAAW,GAAGd,MAAQ,UACtBmB,MAEAJ,EAAYM,KAAKP,EAAW,IAC5BA,EAAWQ,QACXH,IAEAJ,EAAYA,EAAYlB,OAAS,GAAGG,MAAQgB,EACxC,YACA,UACJJ,EAAU,GAAGZ,MAAQ,UACrBmB,KAIJ,GAAIH,EAAY,CACd,KAAOJ,EAAUf,QACfkB,EAAYM,KAAKT,EAAUU,SAC3BP,EAAYA,EAAYlB,OAAS,GAAGG,MAAQ,YAC5CmB,IAEF,KAAOL,EAAWjB,QAChBkB,EAAYA,EAAYlB,OAAS,GAAGG,MAAQ,YAC5Ce,EAAYM,KAAKP,EAAWQ,SAC5BH,IAEFJ,EAAYA,EAAYlB,OAAS,GAAGG,MAAQ,YAC5CmB,GAAS,OACJ,CACL,KAAOP,EAAUf,QAAQkB,EAAYM,KAAKT,EAAUU,SACpD,KAAOR,EAAWjB,QAAQkB,EAAYM,KAAKP,EAAWQ,SAGxD,OAAOP,EAWAQ,CACLjB,EAAKM,EAAWJ,GAChBF,EAAKQ,EAAYN,EAAcI,EAAUf,QACzCW,GAIJF,CAAKjB,EAAO,ICxBCmC,EAjEG,SAACnC,EAAOC,GACxB,IAAIC,EAAQ,EACNC,EAAW,SAACC,EAAYC,GACxBA,GAAQD,EAAWgC,SAAQ,SAACC,GAAD,OAAQA,EAAE1B,MAAQ,eACjDV,EAAcG,EAAYF,EAAOG,GACjCH,GAAS,GAEPc,EAAQ,YAAOhB,IA8CN,SAAPiB,EAAQD,EAAUsB,EAAKC,GAC3B,GAAID,EAAMC,EAAM,CACd,IAAMC,EA9CQ,SAACxB,EAAUsB,EAAKC,GAChC,IAAME,EAAQzB,EAASuB,GACnB9B,EAAI6B,EACRtB,EAASuB,GAAM5B,MAAQ,aAEvB,IAAK,IAAID,EAAI4B,EAAK5B,EAAI6B,EAAM7B,GAAK,EAG/B,GAFAM,EAASN,GAAGC,MAAQ,WACpBR,EAASS,IAAUI,IACfA,EAASN,GAAGG,MAAQ4B,EAAM5B,MAAO,CACnC,GAAIJ,IAAMC,EAAG,CACXM,EAASP,GAAGE,MAAQ,WACpBR,EAASS,IAAUI,IAEnB,IAAM0B,EAAO1B,EAASP,GACtBO,EAASP,GAAKO,EAASN,GACvBM,EAASN,GAAKgC,EACdvC,EAASS,IAAUI,IAErBA,EAASP,GAAGE,MAAQ,UACpBK,EAASN,GAAGC,MAAQ,UACpBR,EAASS,IAAUI,IACnBP,GAAK,OAELO,EAASN,GAAGC,MAAQ,UACpBR,EAASS,IAAUI,IAIvBA,EAASP,GAAGE,MAAQ,WACpBK,EAASuB,GAAM5B,MAAQ,WACvBR,EAASS,IAAUI,IAEnB,IAAM0B,EAAO1B,EAASP,GAStB,OARAO,EAASP,GAAKO,EAASuB,GACvBvB,EAASuB,GAAQG,EACjBvC,EAASS,IAAUI,IAEnBA,EAASP,GAAGE,MAAQ,YACpBK,EAASuB,GAAM5B,MAAQ,UACvBR,EAASS,IAAUI,IAEZP,EAKckC,CAAU3B,EAAUsB,EAAKC,GAC5CtB,EAAKD,EAAUsB,EAAKE,EAAa,GACjCvB,EAAKD,EAAUwB,EAAa,EAAGD,IAInCtB,CAAKD,EAAU,EAAGA,EAASR,OAAS,GACpCL,EAASS,IAAUI,IAAW,ICsDjB4B,EAjHF,SAAC,GAAuD,IAArD5C,EAAoD,EAApDA,MAAO6C,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cAAoB,EAC1BC,oBAAS,GADiB,mBAC3DC,EAD2D,KAC7CC,EAD6C,OAE5BF,mBAAS,MAFmB,mBAE3DG,EAF2D,KAE9CC,EAF8C,OAGxCJ,mBAAS,MAH+B,mBAG3DK,EAH2D,KAGpDC,EAHoD,OAIhCN,mBAAS,SAJuB,mBAI3DO,EAJ2D,KAIhDC,EAJgD,KAM5DvD,EAAgB,SAACG,EAAYF,EAAOG,GACxCoD,YAAW,WACLpD,GAAQ6C,GAAgB,GAC5BL,EAASzC,KACRiD,EAAQnD,IAoBb,OACE,yBAAKP,UAAWsD,EAAe,WAAa,MAC1C,yBAAKtD,UAAU,YACb,yBAAKA,UAAU,cACb,2BAAO+D,QAAQ,eAAf,iBAA4CP,GAC5C,2BACEQ,GAAG,cACHC,KAAK,QACLC,SAAU,SAACC,GAAD,OAAWV,EAAeU,EAAMC,OAAOlD,QACjDA,MAAOsC,EACPa,IAAI,IACJC,IAAI,MACJC,KAAK,MAEP,qDAGF,yBAAKvE,UAAU,cACb,2BAAO+D,QAAQ,SAAf,oBAAyCL,EAAzC,MACA,2BACEM,GAAG,QACHC,KAAK,QACLC,SAAU,SAACC,GAAD,OAAWR,EAASQ,EAAMC,OAAOlD,QAC3CA,MAAOwC,EACPW,IAAI,KACJC,IAAI,OACJC,KAAK,OAEP,wDAIJ,yBAAKvE,UAAU,YACb,yBAAKA,UAAU,cACb,2BAAO+D,QAAQ,aAAf,aACA,4BACEC,GAAG,YACHQ,KAAK,YACLN,SAAU,SAACxB,GAAD,OAAOmB,EAAanB,EAAE0B,OAAOlD,QACvCuD,aAAcb,GAEd,4BAAQ1C,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,WAIJ,yBAAKlB,UAAU,cACb,2BAAO+D,QAAQ,UAAf,aACA,4BACEC,GAAG,SACHQ,KAAK,SACLN,SAAU,SAACxB,GACTU,EAAcV,EAAE0B,OAAOlD,SAGzB,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,WAKN,yBAAKlB,UAAU,YACb,yBAAKA,UAAU,cACb,4BACEiE,KAAK,SACLS,QAAS,WACPvB,EAAcK,KAHlB,mBASF,yBAAKxD,UAAU,cACb,4BAAQiE,KAAK,SAASS,QA3FN,WAEtB,OADAnB,GAAgB,GACRK,GACN,IAAK,SACHxD,EAAUC,EAAOC,GACjB,MACF,IAAK,QACHc,EAAUf,EAAOC,GACjB,MACF,IAAK,QACHkC,EAAUnC,EAAOC,GACjB,MACF,QACEqE,QAAQC,IAAIhB,MA8EV,YC5FKiB,EAfM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACzBC,EAAM,UAAMF,EAAQ5D,MAAQ,GAAtB,KACN+D,EAAkBH,EAAQ9D,MAEhC,MAAe,SAAX+D,EACK,yBAAKG,MAAO,CAAEF,SAAQC,qBACT,SAAXF,EAEP,yBAAKG,MAAO,CAAEF,WACZ,yBAAKhF,UAAU,MAAMkF,MAAO,CAAED,2BAH7B,GCoCME,EApCE,WAAO,IAAD,EACK9B,mBAAS,IADd,mBACdhD,EADc,KACP6C,EADO,OAEeG,mBAAS,QAFxB,mBAEd+B,EAFc,KAEFhC,EAFE,KAIfD,EAAgB,SAACK,GAErB,IADA,IATwBa,EAAKC,EASvBe,EAAW,GACRvE,EAAI,EAAGA,EAAIwE,SAAS9B,EAAa,IAAK1C,GAAK,EAClDuE,EAASvE,GAAK,CACZI,OAZoBmD,EAYM,GAZDC,EAYK,IAX7B5C,KAAKC,MAAMD,KAAK6D,UAAYjB,EAAMD,GAAOA,IAY1CrD,MAAO,WAGXkC,EAASmC,IAIX,OADqB,IAAjBhF,EAAMQ,QAAcsC,EAAc,IAEpC,yBAAKnD,UAAU,kBACb,kBAAC,EAAD,CACEK,MAAOA,EACP6C,SAAUA,EACVC,cAAeA,EACfC,cAAeA,IAGjB,yBAAKpD,UAAU,kBACZK,EAAMmF,KAAI,SAAC9C,EAAG5B,GAAJ,OACT,kBAAC,EAAD,CAAc2E,IAAK3E,EAAGgE,QAASpC,EAAGqC,OAAQK,QAI9C,yBAAKpF,UAAU,iBCzBN0F,MAVf,WACE,OACE,yBAAK1F,UAAU,WACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCJN2F,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.69e7265b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Topbar = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"container\">\r\n        <span>Sorting Algorithms Visualizer</span>\r\n        <a href=\"https://github.com/santiagogarcia97/sorting-visualizer-react\">\r\n          <img src=\"github.png\" alt=\"github\" />\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Topbar\r\n","import cloneDeep from 'clone-deep'\r\n\r\nconst bubleSort = (array, newArrayState) => {\r\n  let count = 1\r\n  const newState = (arrayState, sorted) => {\r\n    newArrayState(arrayState, count, sorted)\r\n    count += 1\r\n  }\r\n\r\n  const auxArr = array\r\n  const n = auxArr.length\r\n\r\n  for (let i = 0; i < n; i += 1) {\r\n    for (let j = 0; j < n - i - 1; j += 1) {\r\n      auxArr[j].color = 'darkcyan'\r\n      auxArr[j + 1].color = 'darkblue'\r\n      newState(cloneDeep(auxArr))\r\n\r\n      if (auxArr[j].value > auxArr[j + 1].value) {\r\n        const aux = auxArr[j].value\r\n        auxArr[j].value = auxArr[j + 1].value\r\n        auxArr[j + 1].value = aux\r\n\r\n        auxArr[j].color = 'darkblue'\r\n        auxArr[j + 1].color = 'darkcyan'\r\n        newState(cloneDeep(auxArr))\r\n      }\r\n\r\n      auxArr[j].color = 'darkred'\r\n      auxArr[j + 1].color = 'darkred'\r\n      newState(cloneDeep(auxArr))\r\n    }\r\n    auxArr[n - i - 1].color = 'darkgreen'\r\n    newState(cloneDeep(auxArr))\r\n  }\r\n  newState(auxArr, true)\r\n}\r\n\r\nexport default bubleSort\r\n","import cloneDeep from 'clone-deep'\r\n\r\nconst mergeSort = (array, newArrayState) => {\r\n  let count = 1\r\n  const newState = (arrayState, sorted) => {\r\n    newArrayState(arrayState, count, sorted)\r\n    count += 1\r\n  }\r\n  let auxArray = [...array]\r\n\r\n  const merge = (leftArray, rightArray, globalIndex) => {\r\n    const sortedArray = []\r\n    const finalMerge = auxArray.length === leftArray.length + rightArray.length\r\n    const init = auxArray.slice(0, globalIndex)\r\n    const end = auxArray.slice(\r\n      globalIndex + rightArray.length + leftArray.length,\r\n    )\r\n\r\n    const addState = (sorted = false) => {\r\n      auxArray = init\r\n        .concat(sortedArray)\r\n        .concat(leftArray)\r\n        .concat(rightArray)\r\n        .concat(end)\r\n      newState(cloneDeep(auxArray), sorted)\r\n    }\r\n\r\n    while (leftArray.length && rightArray.length) {\r\n      leftArray[0].color = 'darkcyan'\r\n      rightArray[0].color = 'darkblue'\r\n      addState()\r\n\r\n      if (leftArray[0].value <= rightArray[0].value) {\r\n        sortedArray.push(leftArray[0])\r\n        leftArray.shift()\r\n        addState()\r\n\r\n        sortedArray[sortedArray.length - 1].color = finalMerge\r\n          ? 'darkgreen'\r\n          : 'darkred'\r\n        rightArray[0].color = 'darkred'\r\n        addState()\r\n      } else {\r\n        sortedArray.push(rightArray[0])\r\n        rightArray.shift()\r\n        addState()\r\n\r\n        sortedArray[sortedArray.length - 1].color = finalMerge\r\n          ? 'darkgreen'\r\n          : 'darkred'\r\n        leftArray[0].color = 'darkred'\r\n        addState()\r\n      }\r\n    }\r\n\r\n    if (finalMerge) {\r\n      while (leftArray.length) {\r\n        sortedArray.push(leftArray.shift())\r\n        sortedArray[sortedArray.length - 1].color = 'darkgreen'\r\n        addState()\r\n      }\r\n      while (rightArray.length) {\r\n        sortedArray[sortedArray.length - 1].color = 'darkgreen'\r\n        sortedArray.push(rightArray.shift())\r\n        addState()\r\n      }\r\n      sortedArray[sortedArray.length - 1].color = 'darkgreen'\r\n      addState(true)\r\n    } else {\r\n      while (leftArray.length) sortedArray.push(leftArray.shift())\r\n      while (rightArray.length) sortedArray.push(rightArray.shift())\r\n    }\r\n\r\n    return sortedArray\r\n  }\r\n\r\n  const sort = (unsortedArray, globalIndex) => {\r\n    if (unsortedArray.length < 2) {\r\n      return unsortedArray\r\n    }\r\n\r\n    const midpoint = Math.floor(unsortedArray.length / 2)\r\n    const leftArray = unsortedArray.slice(0, midpoint)\r\n    const rightArray = unsortedArray.slice(midpoint, unsortedArray.length)\r\n    return merge(\r\n      sort(leftArray, globalIndex),\r\n      sort(rightArray, globalIndex + leftArray.length),\r\n      globalIndex,\r\n    )\r\n  }\r\n\r\n  sort(array, 0)\r\n}\r\n\r\nexport default mergeSort\r\n","import cloneDeep from 'clone-deep'\r\n\r\nconst quickSort = (array, newArrayState) => {\r\n  let count = 1\r\n  const newState = (arrayState, sorted) => {\r\n    if (sorted) arrayState.forEach((e) => (e.color = 'darkgreen'))\r\n    newArrayState(arrayState, count, sorted)\r\n    count += 1\r\n  }\r\n  let auxArray = [...array]\r\n\r\n  const partition = (auxArray, low, high) => {\r\n    const pivot = auxArray[high]\r\n    let i = low\r\n    auxArray[high].color = 'darkorange'\r\n\r\n    for (let j = low; j < high; j += 1) {\r\n      auxArray[j].color = 'darkblue'\r\n      newState(cloneDeep(auxArray))\r\n      if (auxArray[j].value < pivot.value) {\r\n        if (i !== j) {\r\n          auxArray[i].color = 'darkcyan'\r\n          newState(cloneDeep(auxArray))\r\n\r\n          const temp = auxArray[i]\r\n          auxArray[i] = auxArray[j]\r\n          auxArray[j] = temp\r\n          newState(cloneDeep(auxArray))\r\n        }\r\n        auxArray[i].color = 'darkred'\r\n        auxArray[j].color = 'darkred'\r\n        newState(cloneDeep(auxArray))\r\n        i += 1\r\n      } else {\r\n        auxArray[j].color = 'darkred'\r\n        newState(cloneDeep(auxArray))\r\n      }\r\n    }\r\n\r\n    auxArray[i].color = 'darkcyan'\r\n    auxArray[high].color = 'darkblue'\r\n    newState(cloneDeep(auxArray))\r\n\r\n    const temp = auxArray[i]\r\n    auxArray[i] = auxArray[high]\r\n    auxArray[high] = temp\r\n    newState(cloneDeep(auxArray))\r\n\r\n    auxArray[i].color = 'darkgreen'\r\n    auxArray[high].color = 'darkred'\r\n    newState(cloneDeep(auxArray))\r\n\r\n    return i\r\n  }\r\n\r\n  const sort = (auxArray, low, high) => {\r\n    if (low < high) {\r\n      const pivotIndex = partition(auxArray, low, high)\r\n      sort(auxArray, low, pivotIndex - 1)\r\n      sort(auxArray, pivotIndex + 1, high)\r\n    }\r\n  }\r\n\r\n  sort(auxArray, 0, auxArray.length - 1)\r\n  newState(cloneDeep(auxArray), true)\r\n}\r\n\r\nexport default quickSort\r\n","import React, { useState } from 'react'\r\nimport bubleSort from './sortingAlgorithms/bubbleSort'\r\nimport mergeSort from './sortingAlgorithms/mergeSort'\r\nimport quickSort from './sortingAlgorithms/quickSort'\r\n\r\nconst Menu = ({ array, setArray, generateArray, setRenderType }) => {\r\n  const [menuDisabled, setMenuDisabled] = useState(false)\r\n  const [arrayLength, setArrayLength] = useState('25')\r\n  const [delay, setDelay] = useState('50')\r\n  const [algorithm, setAlgorithm] = useState('merge')\r\n\r\n  const newArrayState = (arrayState, count, sorted) => {\r\n    setTimeout(() => {\r\n      if (sorted) setMenuDisabled(false)\r\n      setArray(arrayState)\r\n    }, delay * count)\r\n  }\r\n\r\n  const handleSortClick = () => {\r\n    setMenuDisabled(true)\r\n    switch (algorithm) {\r\n      case 'bubble':\r\n        bubleSort(array, newArrayState)\r\n        break\r\n      case 'merge':\r\n        mergeSort(array, newArrayState)\r\n        break\r\n      case 'quick':\r\n        quickSort(array, newArrayState)\r\n        break\r\n      default:\r\n        console.log(algorithm)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={menuDisabled ? 'disabled' : null}>\r\n      <div className=\"form-row\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"arrayLenght\">Array lenght: {arrayLength}</label>\r\n          <input\r\n            id=\"arrayLenght\"\r\n            type=\"range\"\r\n            onChange={(event) => setArrayLength(event.target.value)}\r\n            value={arrayLength}\r\n            min=\"5\"\r\n            max=\"100\"\r\n            step=\"5\"\r\n          />\r\n          <small>Min: 5 - Max: 100</small>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"delay\">Animation delay: {delay}ms</label>\r\n          <input\r\n            id=\"delay\"\r\n            type=\"range\"\r\n            onChange={(event) => setDelay(event.target.value)}\r\n            value={delay}\r\n            min=\"10\"\r\n            max=\"1000\"\r\n            step=\"10\"\r\n          />\r\n          <small>Min: 10 - Max: 1000</small>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-row\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"algorithm\">Algorithm</label>\r\n          <select\r\n            id=\"algorithm\"\r\n            name=\"algorithm\"\r\n            onChange={(e) => setAlgorithm(e.target.value)}\r\n            defaultValue={algorithm}\r\n          >\r\n            <option value=\"merge\">Merge</option>\r\n            <option value=\"bubble\">Bubble</option>\r\n            <option value=\"quick\">Quick</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"render\">Render as</label>\r\n          <select\r\n            id=\"render\"\r\n            name=\"render\"\r\n            onChange={(e) => {\r\n              setRenderType(e.target.value)\r\n            }}\r\n          >\r\n            <option value=\"bars\">Bars</option>\r\n            <option value=\"dots\">Dots</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-row\">\r\n        <div className=\"form-group\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              generateArray(arrayLength)\r\n            }}\r\n          >\r\n            Generate array\r\n          </button>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <button type=\"button\" onClick={handleSortClick}>\r\n            Sort\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\n\r\nconst ArrayElement = ({ element, render }) => {\r\n  const height = `${element.value / 10}%`\r\n  const backgroundColor = element.color\r\n\r\n  if (render === 'bars') {\r\n    return <div style={{ height, backgroundColor }}></div>\r\n  } else if (render === 'dots') {\r\n    return (\r\n      <div style={{ height }}>\r\n        <div className=\"dot\" style={{ backgroundColor }} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ArrayElement\r\n","import React, { useState } from 'react'\r\nimport Menu from './Menu'\r\nimport ArrayElement from './ArrayElement'\r\n\r\nconst getRandomArbitrary = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min) + min)\r\n}\r\n\r\nconst MainPage = () => {\r\n  const [array, setArray] = useState([])\r\n  const [renderType, setRenderType] = useState('bars')\r\n\r\n  const generateArray = (arrayLength) => {\r\n    const newArray = []\r\n    for (let i = 0; i < parseInt(arrayLength, 10); i += 1) {\r\n      newArray[i] = {\r\n        value: getRandomArbitrary(20, 1000),\r\n        color: 'darkred',\r\n      }\r\n    }\r\n    setArray(newArray)\r\n  }\r\n\r\n  if (array.length === 0) generateArray(25)\r\n  return (\r\n    <div className=\"container main\">\r\n      <Menu\r\n        array={array}\r\n        setArray={setArray}\r\n        generateArray={generateArray}\r\n        setRenderType={setRenderType}\r\n      />\r\n\r\n      <div className=\"flex-container\">\r\n        {array.map((e, i) => (\r\n          <ArrayElement key={i} element={e} render={renderType} />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"bottom-bar\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainPage\r\n","import React from 'react'\r\nimport Topbar from './MainPage/Topbar'\r\nimport MainPage from './MainPage/MainPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Topbar />\r\n\r\n      <MainPage />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}